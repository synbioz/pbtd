{
  "name": "grunt-sftp-deploy",
  "description": "Deployment over SFTP",
  "version": "0.0.10",
  "homepage": "https://github.com/thrashr888/grunt-sftp-deploy",
  "author": {
    "name": "Paul Thrasher",
    "email": "thrashr888@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/thrashr888/grunt-sftp-deploy.git"
  },
  "bugs": {
    "url": "https://github.com/thrashr888/grunt-sftp-deploy/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/thrashr888/grunt-sftp-deploy/blob/master/LICENSE-MIT"
    }
  ],
  "engines": {
    "node": "*"
  },
  "dependencies": {
    "ssh2": "0.2.x",
    "grunt": "0.4.x"
  },
  "keywords": [
    "gruntplugin",
    "sftp",
    "deployment"
  ],
  "readmeFilename": "README.md",
  "readme": "# grunt-sftp-deploy\n\nThis is a [grunt](https://github.com/gruntjs/grunt) task for code deployment over the _sftp_ protocol. It is mostly a copy of [grunt-ftp-deploy](https://github.com/zonak/grunt-ftp-deploy), but uses [ssh2](https://github.com/mscdex/ssh2) to provide sftp access instead of [jsftp](https://github.com/sergi/jsftp). And when I say \"mostly a copy,\" I mean I stole it all and added sftp. Including this readme, for now.\n\nThese days _git_ is not only our goto code management tool but in many cases our deployment tool as well. But there are many cases where _git_ is not really fit for deployment:\n\n- we deploy to servers with only _sftp_ access\n- the production code is a result of a build process producing files that we do not necessarily track with _git_\n\nThis is why a _grunt_ task like this would be very useful.\n\nFor simplicity purposes this task avoids deleting any files and it is not trying to do any size or time stamp comparison. It simply transfers all the files (and folder structure) from your dev / build location to a location on your server.\n\n## Usage\n\nTo use this task you will need to include the following configuration in your _grunt_ file:\n\n```javascript\n'sftp-deploy': {\n  build: {\n    auth: {\n      host: 'server.com',\n      port: 22,\n      authKey: 'key1'\n    },\n    src: '/path/to/source/folder',\n    dest: '/path/to/destination/folder',\n    exclusions: ['/path/to/source/folder/**/.DS_Store', '/path/to/source/folder/**/Thumbs.db', 'dist/tmp'],\n    server_sep: '/'\n  }\n}\n```\n\nand load the task:\n\n```javascript\ngrunt.loadNpmTasks('grunt-sftp-deploy');\n```\n\nThe parameters in our configuration are:\n\n- **host** - the name or the IP address of the server we are deploying to\n- **port** - the port that the _sftp_ service is running on\n- **authKey** - a key for looking up the saved credentials\n- **src** - the source location, the local folder that we are transferring to the server\n- **dest** - the destination location, the folder on the server we are deploying to\n- **exclusions** - an optional parameter allowing us to exclude files and folders by utilizing grunt's support for `minimatch`. Please note that the definitions should be relative to the project root\n- **server_sep** - an optional parameter allowing you to define the server separator in case it differs from your local environment. Useful if you deploy from Windows to Unix\n\n## Authentication parameters\n\nUsernames, passwords, and private key references are stored as a JSON object in a file named `.ftppass`. This file should be omitted from source control. It uses the following format:\n\n```javascript\n{\n  \"key1\": {\n    \"username\": \"username1\",\n    \"password\": \"password1\"\n  },\n  \"key2\": {\n    \"username\": \"username2\",\n    \"password\": \"password2\"\n  },\n  \"privateKey\": {    \n    \"username\": \"username\"\n  },\n  \"privateKeyEncrypted\": {    \n    \"username\": \"username\",\n    \"passphrase\": \"passphrase1\"\n  },\n  \"privateKeyCustom\": {    \n    \"username\": \"username\",\n    \"passphrase\": \"passphrase1\",\n    \"keyLocation\": \"/full/path/to/key\"\n  }\n}\n```\n\nIf `keyLocation` is not specified, `grunt-sftp-deploy` looks for keys at `~/.ssh/id_dsa` and `/.ssh/id_rsa`.\n\nYou can supply passwords for encrypted keys with the `passphrase` attribute.\n\nThis way we can save as many username / password combinations as we want and look them up by the `authKey` value defined in the _grunt_ config file where the rest of the target parameters are defined.\n\n## Dependencies\n\nThis task is built by taking advantage of the great work of Brian White and his [ssh2](https://github.com/mscdex/ssh2) _node.js_ module.\n\n",
  "_id": "grunt-sftp-deploy@0.0.10",
  "dist": {
    "shasum": "a14f0ef6b079ec7703096204b64b6147e19ed1d0"
  },
  "_from": "grunt-sftp-deploy@0.0.10",
  "_resolved": "https://registry.npmjs.org/grunt-sftp-deploy/-/grunt-sftp-deploy-0.0.10.tgz"
}
